/*
Copyright (c) 2023 OceanBase
ob-operator is licensed under Mulan PSL v2.
You can use this software according to the terms and conditions of the Mulan PSL v2.
You may obtain a copy of Mulan PSL v2 at:

	http://license.coscl.org.cn/MulanPSL2

THIS SOFTWARE IS PROVIDED ON AN "AS IS" BASIS, WITHOUT WARRANTIES OF ANY KIND,
EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO NON-INFRINGEMENT,
MERCHANTABILITY OR FIT FOR A PARTICULAR PURPOSE.
See the Mulan PSL v2 for more details.
*/

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"

	apitypes "github.com/oceanbase/ob-operator/api/types"
	"github.com/oceanbase/ob-operator/pkg/oceanbase-sdk/model"
	tasktypes "github.com/oceanbase/ob-operator/pkg/task/types"
)

// EDIT THIS FILE!  THIS IS SCAFFOLDING FOR YOU TO OWN!
// NOTE: json tags are required.  Any new fields you add must have json tags for the fields to be serialized.

// OBTenantBackupPolicySpec defines the desired state of OBTenantBackupPolicy
type OBTenantBackupPolicySpec struct {
	// INSERT ADDITIONAL SPEC FIELDS - desired state of cluster
	// Important: Run "make" to regenerate code after modifying this file

	ObClusterName string           `json:"obClusterName"`
	TenantName    string           `json:"tenantName,omitempty"`   // Name of tenant in database
	TenantSecret  string           `json:"tenantSecret,omitempty"` // Recommend to use 'credentials' of OBTenant instead
	TenantCRName  string           `json:"tenantCRName,omitempty"` // Name of obtenant resource
	JobKeepWindow string           `json:"jobKeepWindow,omitempty"`
	Suspend       bool             `json:"suspend,omitempty"`
	LogArchive    LogArchiveConfig `json:"logArchive"`
	DataBackup    DataBackupConfig `json:"dataBackup"`
	DataClean     CleanPolicy      `json:"dataClean,omitempty"`
}

// +kubebuilder:object:generate=false
// OBTenantBackupPolicyStatus defines the observed state of OBTenantBackupPolicy
type OBTenantBackupPolicyStatus struct {
	Status           apitypes.BackupPolicyStatusType `json:"status"`
	OperationContext *tasktypes.OperationContext     `json:"operationContext,omitempty"`

	ObservedGeneration int64  `json:"observedGeneration,omitempty"`
	NextFull           string `json:"nextFull,omitempty"`
	NextIncremental    string `json:"nextIncremental,omitempty"`
	// Deprecated
	TenantCR             *OBTenant               `json:"tenantCR,omitempty"`
	TenantName           string                  `json:"tenantName,omitempty"`
	TenantInfo           *model.OBTenant         `json:"tenantInfo,omitempty"`
	LatestFullBackupJob  *model.OBBackupJob      `json:"latestFullBackupJob,omitempty"`
	LatestIncrementalJob *model.OBBackupJob      `json:"latestIncrementalJob,omitempty"`
	LatestArchiveLogJob  *model.OBArchiveLogJob  `json:"latestArchiveLogJob,omitempty"`
	LatestBackupCleanJob *model.OBBackupCleanJob `json:"latestBackupCleanJob,omitempty"`
}

// DeepCopyInto is an autogenerated deepcopy function, copying the receiver, writing into out. in must be non-nil.
func (in *OBTenantBackupPolicyStatus) DeepCopyInto(out *OBTenantBackupPolicyStatus) {
	*out = *in
	if in.OperationContext != nil {
		in, out := &in.OperationContext, &out.OperationContext
		*out = new(tasktypes.OperationContext)
		(*in).DeepCopyInto(*out)
	}
	if in.TenantInfo != nil {
		in, out := &in.TenantInfo, &out.TenantInfo
		*out = new(model.OBTenant)
		**out = **in
	}
	if in.LatestFullBackupJob != nil {
		in, out := &in.LatestFullBackupJob, &out.LatestFullBackupJob
		*out = new(model.OBBackupJob)
		**out = **in
	}
	if in.LatestArchiveLogJob != nil {
		in, out := &in.LatestArchiveLogJob, &out.LatestArchiveLogJob
		*out = new(model.OBArchiveLogJob)
		**out = **in
	}
	if in.LatestBackupCleanJob != nil {
		in, out := &in.LatestBackupCleanJob, &out.LatestBackupCleanJob
		*out = new(model.OBBackupCleanJob)
		**out = **in
	}
}

// DeepCopy is an autogenerated deepcopy function, copying the receiver, creating a new OBTenantBackupPolicyStatus.
func (in *OBTenantBackupPolicyStatus) DeepCopy() *OBTenantBackupPolicyStatus {
	if in == nil {
		return nil
	}
	out := new(OBTenantBackupPolicyStatus)
	in.DeepCopyInto(out)
	return out
}

//+kubebuilder:object:root=true
//+kubebuilder:subresource:status
//+kubebuilder:printcolumn:name="Status",type=string,JSONPath=`.status.status`
//+kubebuilder:printcolumn:name="Age",type="date",JSONPath=".metadata.creationTimestamp"
//+kubebuilder:printcolumn:name="TenantName",type=string,JSONPath=`.spec.tenantName`
//+kubebuilder:printcolumn:name="NextFull",type=string,JSONPath=`.status.nextFull`
//+kubebuilder:printcolumn:name="NextIncremental",type=string,JSONPath=`.status.nextIncremental`
//+kubebuilder:printcolumn:name="FullCrontab",type=string,JSONPath=`.spec.dataBackup.fullCrontab`
//+kubebuilder:printcolumn:name="IncrementalCrontab",type=string,JSONPath=`.spec.dataBackup.incrementalCrontab`
//+kubebuilder:resource:shortName=obtbp
//+kubebuilder:printcolumn:name="Tasks",type="string",JSONPath=".status.operationContext.tasks",priority=1
//+kubebuilder:printcolumn:name="Task",type="string",JSONPath=".status.operationContext.task",priority=1

// OBTenantBackupPolicy is the Schema for the obtenantbackuppolicies API
type OBTenantBackupPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`

	Spec   OBTenantBackupPolicySpec   `json:"spec,omitempty"`
	Status OBTenantBackupPolicyStatus `json:"status,omitempty"`
}

//+kubebuilder:object:root=true

// OBTenantBackupPolicyList contains a list of OBTenantBackupPolicy
type OBTenantBackupPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []OBTenantBackupPolicy `json:"items"`
}

func init() {
	SchemeBuilder.Register(&OBTenantBackupPolicy{}, &OBTenantBackupPolicyList{})
}

// LogArchiveConfig contains the configuration for log archive progress
type LogArchiveConfig struct {
	Destination         apitypes.BackupDestination `json:"destination"`
	SwitchPieceInterval string                     `json:"switchPieceInterval"`
	Binding             apitypes.ArchiveBinding    `json:"binding,omitempty"`
	DestDisabled        bool                       `json:"destDisabled,omitempty"`
	Concurrency         int                        `json:"concurrency,omitempty"`
}

// DataBackupConfig contains the configuration for data backup progress
type DataBackupConfig struct {
	Destination        apitypes.BackupDestination `json:"destination"`
	FullCrontab        string                     `json:"fullCrontab,omitempty"`
	IncrementalCrontab string                     `json:"incrementalCrontab,omitempty"`
	EncryptionSecret   string                     `json:"encryptionSecret,omitempty"`
}

type CleanPolicy struct {
	Name           string `json:"name,omitempty"`
	RecoveryWindow string `json:"recoveryWindow,omitempty"`
	Disabled       string `json:"disabled,omitempty"`
}

func (in *OBTenantBackupPolicy) CopyStatus(out *OBTenantBackupPolicy) {
	in.Status = out.Status
}
