basePath: /api/v1
definitions:
  common.AffinitySpec:
    properties:
      key:
        type: string
      type:
        $ref: '#/definitions/common.AffinityType'
      value:
        type: string
    type: object
  common.AffinityType:
    enum:
    - NODE
    - POD
    - POD_ANTI
    type: string
    x-enum-varnames:
    - NodeAffinityType
    - PodAffinityType
    - PodAntiAffinityType
  common.ClusterMode:
    enum:
    - NORMAL
    - STANDALONE
    - SERVICE
    type: string
    x-enum-varnames:
    - ClusterModeNormal
    - ClusterModeStandalone
    - ClusterModeService
  common.KVPair:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  common.ResourceSpec:
    properties:
      cpu:
        type: integer
      memory:
        type: integer
    type: object
  common.StorageSpec:
    properties:
      size:
        type: integer
      storageClass:
        type: string
    type: object
  models.K8sEvent:
    properties:
      count:
        type: integer
      firstTimestamp:
        type: string
      kind:
        type: string
      lastTimestamp:
        type: string
      message:
        type: string
      name:
        type: string
      namespace:
        type: string
      reason:
        type: string
      resourceName:
        type: string
    type: object
  models.OBBackupPolicy:
    properties:
      archiveDestType:
        type: string
      archiveSwitchPieceInterval:
        type: string
      bakDataDestType:
        type: string
      bakDataFullCrontab:
        type: string
      bakDataIncrCrontab:
        type: string
      encryptBakData:
        type: boolean
      name:
        type: string
      namespace:
        type: string
      runningFlow:
        type: string
      runningTask:
        type: string
      status:
        type: string
      taskStatus:
        type: string
      tenantCR:
        type: string
      tenantName:
        type: string
      uid:
        type: string
    type: object
  models.OBCluster:
    properties:
      clusterId:
        type: integer
      clusterMode:
        type: string
      clusterName:
        type: string
      configuredBackupVolume:
        type: boolean
      configuredMonitor:
        type: boolean
      cpu:
        type: integer
      dataStorage:
        $ref: '#/definitions/models.StorageSpec'
      image:
        type: string
      independentPVC:
        type: boolean
      memory:
        type: integer
      name:
        type: string
      namespace:
        type: string
      redoLogStorage:
        $ref: '#/definitions/models.StorageSpec'
      runningFlow:
        type: string
      runningTask:
        type: string
      singlePVC:
        type: boolean
      status:
        type: string
      sysLogStorage:
        $ref: '#/definitions/models.StorageSpec'
      taskStatus:
        type: string
      uid:
        type: string
      zones:
        items:
          $ref: '#/definitions/models.OBZoneStatus'
        type: array
    type: object
  models.OBServer:
    properties:
      clusterCR:
        type: string
      clusterId:
        type: integer
      clusterName:
        type: string
      cni:
        type: string
      image:
        type: string
      name:
        type: string
      namespace:
        type: string
      podIPHash:
        type: string
      podPhase:
        type: string
      runningFlow:
        type: string
      runningTask:
        type: string
      serviceIPHash:
        type: string
      status:
        type: string
      taskStatus:
        type: string
      uid:
        type: string
      zoneName:
        type: string
    type: object
  models.OBTenant:
    properties:
      archiveDestType:
        type: string
      bakDataDestType:
        type: string
      clusterName:
        type: string
      name:
        type: string
      namespace:
        type: string
      primaryTenant:
        type: string
      runningFlow:
        type: string
      runningTask:
        type: string
      status:
        type: string
      taskStatus:
        type: string
      tenantName:
        type: string
      tenantRole:
        type: string
      topology:
        items:
          $ref: '#/definitions/models.OBTenantResourcePool'
        type: array
      uid:
        type: string
      unitNumber:
        type: integer
    type: object
  models.OBTenantResourcePool:
    properties:
      IOPSWeight:
        type: integer
      logDiskSize:
        type: integer
      maxCPU:
        type: integer
      maxIOPS:
        type: integer
      memorySize:
        type: integer
      minCPU:
        type: integer
      minIOPS:
        type: integer
      priority:
        type: integer
      type:
        type: string
      unitNumber:
        type: integer
      zone:
        type: string
    type: object
  models.OBZone:
    properties:
      clusterCR:
        type: string
      clusterId:
        type: integer
      clusterName:
        type: string
      image:
        type: string
      name:
        type: string
      namespace:
        type: string
      runningFlow:
        type: string
      runningTask:
        type: string
      status:
        type: string
      taskStatus:
        type: string
      uid:
        type: string
    type: object
  models.OBZoneStatus:
    properties:
      replica:
        type: integer
      status:
        type: string
      zoneName:
        type: string
    type: object
  models.StorageSpec:
    properties:
      storageClass:
        type: string
      storageSize:
        type: integer
    type: object
  param.ChangeTenantRole:
    properties:
      failover:
        type: boolean
      switchover:
        type: boolean
    type: object
  param.ChangeUserPassword:
    properties:
      password:
        type: string
      user:
        description: 'Description: The user name of the database account, only root
          is supported now.'
        type: string
    required:
    - password
    - user
    type: object
  param.CreateBackupPolicy:
    properties:
      archivePath:
        type: string
      bakDataPath:
        type: string
      bakEncryptionPassword:
        example: encryptedPassword
        type: string
      destType:
        description: 'Enum: NFS, OSS'
        example: NFS
        type: string
      jobKeepDays:
        example: 5
        type: integer
      ossAccessId:
        example: encryptedPassword
        type: string
      ossAccessKey:
        example: encryptedPassword
        type: string
      pieceIntervalDays:
        example: 1
        type: integer
      recoveryDays:
        example: 3
        type: integer
      scheduleDates:
        items:
          $ref: '#/definitions/param.ScheduleDate'
        type: array
      scheduleTime:
        description: |-
          Description: HH:MM
          Example: 04:00
        example: "04:00"
        type: string
      scheduleType:
        description: 'Enum: Weekly, Monthly'
        example: Weekly
        type: string
    required:
    - archivePath
    - bakDataPath
    - destType
    type: object
  param.CreateNamespaceParam:
    properties:
      namespace:
        type: string
    type: object
  param.CreateOBClusterParam:
    properties:
      backupVolume:
        $ref: '#/definitions/param.NFSVolumeSpec'
      clusterId:
        type: integer
      clusterName:
        type: string
      mode:
        $ref: '#/definitions/common.ClusterMode'
      monitor:
        $ref: '#/definitions/param.MonitorSpec'
      name:
        type: string
      namespace:
        type: string
      observer:
        $ref: '#/definitions/param.OBServerSpec'
      parameters:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      rootPassword:
        type: string
      topology:
        items:
          $ref: '#/definitions/param.ZoneTopology'
        type: array
    type: object
  param.CreateOBTenantParam:
    properties:
      charset:
        type: string
      connectWhiteList:
        type: string
      name:
        type: string
      namespace:
        type: string
      obcluster:
        type: string
      pools:
        items:
          $ref: '#/definitions/param.ResourcePoolSpec'
        type: array
      rootPassword:
        type: string
      source:
        $ref: '#/definitions/param.TenantSourceSpec'
      tenantName:
        type: string
      tenantRole:
        description: 'Enum: Primary, Standby'
        type: string
      unitConfig:
        $ref: '#/definitions/param.UnitConfig'
      unitNum:
        type: integer
    required:
    - name
    - namespace
    - obcluster
    - pools
    - rootPassword
    - tenantName
    - unitConfig
    - unitNum
    type: object
  param.LoginParam:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  param.MetricQuery:
    properties:
      groupLabels:
        items:
          type: string
        type: array
      labels:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      metrics:
        items:
          type: string
        type: array
      queryRange:
        $ref: '#/definitions/param.QueryRange'
    type: object
  param.MonitorSpec:
    properties:
      image:
        type: string
      resource:
        $ref: '#/definitions/common.ResourceSpec'
    type: object
  param.NFSVolumeSpec:
    properties:
      address:
        type: string
      path:
        type: string
    type: object
  param.OBServerSpec:
    properties:
      image:
        type: string
      resource:
        $ref: '#/definitions/common.ResourceSpec'
      storage:
        $ref: '#/definitions/param.OBServerStorageSpec'
    type: object
  param.OBServerStorageSpec:
    properties:
      data:
        $ref: '#/definitions/common.StorageSpec'
      log:
        $ref: '#/definitions/common.StorageSpec'
      redoLog:
        $ref: '#/definitions/common.StorageSpec'
    type: object
  param.PatchTenant:
    properties:
      unitConfig:
        $ref: '#/definitions/param.PatchUnitConfig'
      unitNum:
        type: integer
    type: object
  param.PatchUnitConfig:
    properties:
      pools:
        items:
          $ref: '#/definitions/param.ResourcePoolSpec'
        type: array
      unitConfig:
        $ref: '#/definitions/param.UnitConfig'
    required:
    - pools
    - unitConfig
    type: object
  param.QueryRange:
    properties:
      endTimestamp:
        type: number
      startTimestamp:
        type: number
      step:
        type: integer
    type: object
  param.ReplayStandbyLog:
    properties:
      timestamp:
        example: "2024-02-23 17:47:00"
        type: string
      unlimited:
        type: boolean
    type: object
  param.ResourcePoolSpec:
    properties:
      priority:
        type: integer
      type:
        description: 'Enum: Readonly, Full'
        type: string
      zone:
        type: string
    required:
    - zone
    type: object
  param.RestoreSourceSpec:
    properties:
      archiveSource:
        type: string
      bakDataSource:
        type: string
      bakEncryptionPassword:
        type: string
      ossAccessId:
        type: string
      ossAccessKey:
        type: string
      type:
        description: 'Enum: OSS, NFS'
        type: string
      until:
        $ref: '#/definitions/param.RestoreUntilConfig'
    required:
    - archiveSource
    - bakDataSource
    - type
    type: object
  param.RestoreUntilConfig:
    properties:
      timestamp:
        example: "2024-02-23 17:47:00"
        type: string
      unlimited:
        type: boolean
    type: object
  param.ScaleOBServerParam:
    properties:
      replicas:
        type: integer
    type: object
  param.ScheduleDate:
    properties:
      backupType:
        description: 'Enum: Full, Incremental'
        example: Full
        type: string
      day:
        description: 'Description: 1-31 for monthly, 1-7 for weekly'
        example: 3
        type: integer
    required:
    - backupType
    - day
    type: object
  param.TenantSourceSpec:
    properties:
      restore:
        $ref: '#/definitions/param.RestoreSourceSpec'
      tenant:
        type: string
    type: object
  param.UnitConfig:
    properties:
      cpuCount:
        type: string
      iopsWeight:
        type: integer
      logDiskSize:
        type: string
      maxIops:
        type: integer
      memorySize:
        type: string
      minIops:
        type: integer
    required:
    - cpuCount
    - memorySize
    type: object
  param.UpdateBackupPolicy:
    properties:
      jobKeepDays:
        example: 5
        type: integer
      pieceIntervalDays:
        example: 1
        type: integer
      recoveryDays:
        example: 3
        type: integer
      scheduleDates:
        items:
          $ref: '#/definitions/param.ScheduleDate'
        type: array
      scheduleTime:
        description: |-
          Description: HH:MM
          Example: 04:00
        example: "04:00"
        type: string
      scheduleType:
        description: 'Enum: Weekly, Monthly'
        example: Weekly
        type: string
      status:
        description: 'Enum: PAUSED, RUNNING'
        example: PAUSED
        type: string
    type: object
  param.UpgradeOBClusterParam:
    properties:
      image:
        type: string
    type: object
  param.ZoneTopology:
    properties:
      affinities:
        items:
          $ref: '#/definitions/common.AffinitySpec'
        type: array
      nodeSelector:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      replicas:
        type: integer
      tolerations:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      zone:
        type: string
    type: object
  response.APIResponse:
    properties:
      data: {}
      message:
        type: string
      successful:
        type: boolean
    type: object
  response.BackupJob:
    properties:
      backupPolicyName:
        type: string
      encryptionSecret:
        type: string
      endTime:
        description: End time of the backup job, empty for ARCHIVE job
        type: string
      name:
        type: string
      namespace:
        type: string
      path:
        description: Empty for Clean job
        type: string
      startTime:
        description: Start time of the backup job, StartScnDisplay for ARCHIVE job
        type: string
      status:
        type: string
      statusInDatabase:
        type: string
      tenantName:
        type: string
      type:
        description: 'Enum: FULL, INCR, ARCHIVE, CLEAN'
        type: string
    type: object
  response.BackupPolicy:
    properties:
      archivePath:
        type: string
      bakDataPath:
        type: string
      bakEncryptionSecret:
        type: string
      destType:
        description: 'Enum: NFS, OSS'
        example: NFS
        type: string
      jobKeepDays:
        example: 5
        type: integer
      name:
        type: string
      namespace:
        type: string
      ossAccessSecret:
        type: string
      pieceIntervalDays:
        example: 1
        type: integer
      recoveryDays:
        example: 3
        type: integer
      scheduleDates:
        items:
          $ref: '#/definitions/param.ScheduleDate'
        type: array
      scheduleTime:
        description: |-
          Description: HH:MM
          Example: 04:00
        example: "04:00"
        type: string
      scheduleType:
        description: 'Enum: Weekly, Monthly'
        example: Weekly
        type: string
      status:
        type: string
      tenantName:
        type: string
    required:
    - archivePath
    - bakDataPath
    - destType
    type: object
  response.DashboardInfo:
    properties:
      appName:
        type: string
      publicKey:
        type: string
      version:
        type: string
    type: object
  response.K8sEvent:
    properties:
      count:
        type: integer
      firstOccur:
        type: number
      lastSeen:
        type: number
      message:
        type: string
      namespace:
        type: string
      object:
        type: string
      reason:
        type: string
      type:
        type: string
    type: object
  response.K8sNode:
    properties:
      info:
        $ref: '#/definitions/response.K8sNodeInfo'
      resource:
        $ref: '#/definitions/response.K8sNodeResource'
    type: object
  response.K8sNodeCondition:
    properties:
      message:
        type: string
      reason:
        type: string
      type:
        type: string
    type: object
  response.K8sNodeInfo:
    properties:
      conditions:
        items:
          $ref: '#/definitions/response.K8sNodeCondition'
        type: array
      cri:
        type: string
      externalIP:
        type: string
      internalIP:
        type: string
      kernel:
        type: string
      labels:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      name:
        type: string
      os:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        type: string
      uptime:
        type: number
      version:
        type: string
    type: object
  response.K8sNodeResource:
    properties:
      cpuFree:
        type: number
      cpuTotal:
        type: number
      cpuUsed:
        type: number
      memoryFree:
        type: number
      memoryTotal:
        type: number
      memoryUsed:
        type: number
    type: object
  response.Metric:
    properties:
      labels:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      name:
        type: string
    type: object
  response.MetricClass:
    properties:
      description:
        type: string
      metricGroups:
        items:
          $ref: '#/definitions/response.MetricGroup'
        type: array
      name:
        type: string
    type: object
  response.MetricData:
    properties:
      metric:
        $ref: '#/definitions/response.Metric'
      values:
        items:
          $ref: '#/definitions/response.MetricValue'
        type: array
    type: object
  response.MetricGroup:
    properties:
      description:
        type: string
      metrics:
        items:
          $ref: '#/definitions/response.MetricMeta'
        type: array
      name:
        type: string
    type: object
  response.MetricMeta:
    properties:
      description:
        type: string
      key:
        type: string
      name:
        type: string
      unit:
        type: string
    type: object
  response.MetricValue:
    properties:
      timestamp:
        type: number
      value:
        type: number
    type: object
  response.MonitorSpec:
    properties:
      image:
        type: string
      resource:
        $ref: '#/definitions/common.ResourceSpec'
    type: object
  response.NFSVolumeSpec:
    properties:
      address:
        type: string
      path:
        type: string
    type: object
  response.Namespace:
    properties:
      namespace:
        type: string
      status:
        type: string
    type: object
  response.OBCluster:
    properties:
      backupVolume:
        $ref: '#/definitions/response.NFSVolumeSpec'
      clusterId:
        type: integer
      clusterName:
        type: string
      createTime:
        type: number
      image:
        type: string
      metrics:
        $ref: '#/definitions/response.OBMetrics'
      mode:
        $ref: '#/definitions/common.ClusterMode'
      monitor:
        $ref: '#/definitions/response.MonitorSpec'
      name:
        type: string
      namespace:
        type: string
      parameters:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      rootPasswordSecret:
        type: string
      status:
        type: string
      statusDetail:
        type: string
      topology:
        items:
          $ref: '#/definitions/response.OBZone'
        type: array
      version:
        type: string
    type: object
  response.OBClusterResources:
    properties:
      minPoolMemory:
        example: 2147483648
        type: integer
      obServerResources:
        items:
          $ref: '#/definitions/response.OBServerAvailableResource'
        type: array
      obZoneResourceMap:
        additionalProperties:
          $ref: '#/definitions/response.OBZoneAvaiableResource'
        type: object
    type: object
  response.OBClusterStastistic:
    properties:
      count:
        type: integer
      status:
        type: string
    type: object
  response.OBMetrics:
    properties:
      cpuPercent:
        type: integer
      diskPercent:
        type: integer
      memoryPercent:
        type: integer
    type: object
  response.OBServer:
    properties:
      address:
        type: string
      metrics:
        $ref: '#/definitions/response.OBMetrics'
      name:
        type: string
      namespace:
        type: string
      status:
        type: string
      statusDetail:
        type: string
    type: object
  response.OBServerAvailableResource:
    properties:
      availableCPU:
        example: 12
        type: integer
      availableDataDisk:
        example: 16106127360
        type: integer
      availableLogDisk:
        example: 5368709120
        type: integer
      availableMemory:
        example: 5368709120
        type: integer
      obServerIP:
        type: string
      obZone:
        example: zone1
        type: string
      serverCount:
        example: 3
        type: integer
    type: object
  response.OBTenantBrief:
    description: Brief information about OBTenant
    properties:
      charset:
        description: Charset of the tenant
        type: string
      clusterName:
        description: Name of the cluster belonging to
        type: string
      createTime:
        description: Creation time of the tenant
        type: string
      locality:
        description: Locality of the tenant units
        type: string
      name:
        description: Name of the resource
        type: string
      namespace:
        description: Namespace of the resource
        type: string
      status:
        description: Status of the tenant
        type: string
      tenantName:
        description: Name of the tenant in the database
        type: string
      tenantRole:
        description: 'Enum: Primary, Standby'
        type: string
      topology:
        description: Topology of the tenant
        items:
          $ref: '#/definitions/response.OBTenantReplica'
        type: array
      unitNumber:
        description: Number of units in every zone
        type: integer
    type: object
  response.OBTenantDetail:
    properties:
      charset:
        description: Charset of the tenant
        type: string
      clusterName:
        description: Name of the cluster belonging to
        type: string
      createTime:
        description: Creation time of the tenant
        type: string
      locality:
        description: Locality of the tenant units
        type: string
      name:
        description: Name of the resource
        type: string
      namespace:
        description: Namespace of the resource
        type: string
      primaryTenant:
        type: string
      restoreSource:
        $ref: '#/definitions/response.RestoreSource'
      rootCredential:
        type: string
      standbyROCredentail:
        type: string
      status:
        description: Status of the tenant
        type: string
      tenantName:
        description: Name of the tenant in the database
        type: string
      tenantRole:
        description: 'Enum: Primary, Standby'
        type: string
      topology:
        description: Topology of the tenant
        items:
          $ref: '#/definitions/response.OBTenantReplica'
        type: array
      unitNumber:
        description: Number of units in every zone
        type: integer
      version:
        type: string
    type: object
  response.OBTenantReplica:
    properties:
      iopsWeight:
        type: integer
      logDiskSize:
        type: string
      maxCPU:
        type: string
      maxIops:
        type: integer
      memorySize:
        type: string
      minCPU:
        type: string
      minIops:
        type: integer
      priority:
        type: integer
      type:
        description: 'Enum: Readonly, Full'
        type: string
      zone:
        type: string
    type: object
  response.OBTenantStatistic:
    properties:
      count:
        type: integer
      status:
        type: string
    type: object
  response.OBZone:
    properties:
      affinities:
        items:
          $ref: '#/definitions/common.AffinitySpec'
        type: array
      name:
        type: string
      namespace:
        type: string
      nodeSelector:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      observers:
        items:
          $ref: '#/definitions/response.OBServer'
        type: array
      replicas:
        type: integer
      rootService:
        type: string
      status:
        type: string
      statusDetail:
        type: string
      tolerations:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      zone:
        type: string
    type: object
  response.OBZoneAvaiableResource:
    properties:
      availableCPU:
        example: 12
        type: integer
      availableDataDisk:
        example: 16106127360
        type: integer
      availableLogDisk:
        example: 5368709120
        type: integer
      availableMemory:
        example: 5368709120
        type: integer
      obZone:
        example: zone1
        type: string
      serverCount:
        example: 3
        type: integer
    type: object
  response.RestoreSource:
    properties:
      archiveSource:
        type: string
      bakDataSource:
        type: string
      bakEncryptionSecret:
        type: string
      ossAccessSecret:
        type: string
      type:
        description: 'Enum: OSS, NFS'
        type: string
      until:
        type: string
    type: object
  response.StatisticData:
    properties:
      backupPolicies:
        items:
          $ref: '#/definitions/models.OBBackupPolicy'
        type: array
      clusters:
        items:
          $ref: '#/definitions/models.OBCluster'
        type: array
      servers:
        items:
          $ref: '#/definitions/models.OBServer'
        type: array
      tenants:
        items:
          $ref: '#/definitions/models.OBTenant'
        type: array
      version:
        type: string
      warningEvents:
        items:
          $ref: '#/definitions/models.K8sEvent'
        type: array
      zones:
        items:
          $ref: '#/definitions/models.OBZone'
        type: array
    type: object
  response.StatisticDataResponse:
    properties:
      component:
        type: string
      content:
        $ref: '#/definitions/response.StatisticData'
      time:
        type: string
    type: object
  response.StorageClass:
    properties:
      allowVolumeExpansion:
        type: boolean
      mountOptions:
        items:
          type: string
        type: array
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      provisioner:
        type: string
      reclaimPolicy:
        type: string
      volumeBindingMode:
        type: string
    type: object
info:
  contact: {}
  description: OceanBase Dashboard
  title: OceanBase Dashboard API
  version: "1.0"
paths:
  /api/v1/cluster/events:
    get:
      consumes:
      - application/json
      description: list k8s events
      operationId: ListK8sEvents
      parameters:
      - description: related object types
        enum:
        - OBCLUSTER
        - OBTENANT
        in: query
        name: objectType
        type: string
      - description: event level
        enum:
        - NORMAL
        - WARNING
        in: query
        name: type
        type: string
      - description: Object name
        in: query
        name: name
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.K8sEvent'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list k8s event
      tags:
      - Cluster
  /api/v1/cluster/namespaces:
    get:
      consumes:
      - application/json
      description: list k8s namespaces
      operationId: ListK8sNamespaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Namespace'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list k8s namespaces
      tags:
      - Cluster
    post:
      consumes:
      - application/json
      description: create k8s namespace
      operationId: CreateK8sNamespace
      parameters:
      - description: create obcluster request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.CreateNamespaceParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: create k8s namespace
      tags:
      - Cluster
  /api/v1/cluster/nodes:
    get:
      consumes:
      - application/json
      description: list k8s nodes
      operationId: ListK8sNodes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.K8sNode'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list k8s nodes
      tags:
      - Cluster
  /api/v1/cluster/storageClasses:
    get:
      consumes:
      - application/json
      description: list k8s storage classes
      operationId: ListK8sStorageClasses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.StorageClass'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list k8s storage classes
      tags:
      - Cluster
  /api/v1/info:
    get:
      consumes:
      - application/json
      description: Get process info of OceanBase Dashboard, including process name
        etc.
      operationId: GetProcessInfo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.DashboardInfo'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get process info
      tags:
      - Info
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: User login and return access token with cookie.
      operationId: Login
      parameters:
      - description: login
        in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/param.LoginParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: User login
      tags:
      - User
  /api/v1/logout:
    post:
      description: User logout and clear session.
      operationId: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: User logout
      tags:
      - User
  /api/v1/metrics:
    get:
      consumes:
      - application/json
      description: list all metrics meta info, return by groups
      operationId: ListAllMetrics
      parameters:
      - description: metrics scope
        enum:
        - OBCLUSTER
        - OBTENANT
        in: query
        name: scope
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.MetricClass'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list all metrics
      tags:
      - Metric
  /api/v1/metrics/query:
    post:
      consumes:
      - application/json
      description: query metric data
      operationId: QueryMetrics
      parameters:
      - description: metric query request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.MetricQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.MetricData'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: query metrics
      tags:
      - Metric
  /api/v1/metrics/telemetry:
    get:
      consumes:
      - application/json
      description: get telemetry data
      operationId: GetStatistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.StatisticDataResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: get telemetry data
      tags:
      - Info
  /api/v1/obclusters:
    get:
      consumes:
      - application/json
      description: list obclusters
      operationId: ListOBClusters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.OBCluster'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list obclusters
      tags:
      - Obcluster
    post:
      consumes:
      - application/json
      description: create obcluster
      operationId: CreateOBCluster
      parameters:
      - description: create obcluster request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.CreateOBClusterParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: create obcluster
      tags:
      - Obcluster
  /api/v1/obclusters/{namespace}/{name}/essential-parameters:
    get:
      consumes:
      - application/json
      description: list essential parameters of specific obcluster
      operationId: ListOBClusterResources
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBClusterResources'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list essential parameters
      tags:
      - Obcluster
  /api/v1/obclusters/namespace/{namespace}/name/{name}:
    delete:
      consumes:
      - application/json
      description: delete obcluster
      operationId: DeleteOBCluster
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: delete obcluster
      tags:
      - Obcluster
    get:
      consumes:
      - application/json
      description: get obcluster detailed info
      operationId: GetOBCluster
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBCluster'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: get obcluster
      tags:
      - Obcluster
    post:
      consumes:
      - application/json
      description: upgrade obcluster
      operationId: UpgradeOBCluster
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      - description: upgrade obcluster request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.UpgradeOBClusterParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: upgrade obcluster
      tags:
      - Obcluster
  /api/v1/obclusters/namespace/{namespace}/name/{name}/obzones:
    post:
      consumes:
      - application/json
      description: add obzone
      operationId: AddOBZone
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      - description: add obzone request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ZoneTopology'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: add obzone
      tags:
      - Obcluster
  /api/v1/obclusters/namespace/{namespace}/name/{name}/obzones/{obzoneName}:
    delete:
      consumes:
      - application/json
      description: delete obzone
      operationId: DeleteOBZone
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      - description: obzone name
        in: path
        name: obzoneName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: delete obzone
      tags:
      - Obcluster
  /api/v1/obclusters/namespace/{namespace}/name/{name}/obzones/{obzoneName}/scale:
    post:
      consumes:
      - application/json
      description: scale observer
      operationId: ScaleOBServer
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      - description: obzone name
        in: path
        name: obzoneName
        required: true
        type: string
      - description: scale observer request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ScaleOBServerParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: scale observer
      tags:
      - Obcluster
  /api/v1/obclusters/statistic:
    get:
      consumes:
      - application/json
      description: get obcluster statistic info
      operationId: GetOBClusterStatistic
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.OBClusterStastistic'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: get obcluster statistic
      tags:
      - Obcluster
  /api/v1/obtenants:
    get:
      consumes:
      - application/json
      description: List all tenants and return them
      operationId: ListAllTenants
      parameters:
      - description: obcluster to filter
        in: query
        name: obcluster
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.OBTenantBrief'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List all tenants
      tags:
      - Obtenant
    put:
      consumes:
      - application/json
      description: Create an obtenant in a specific namespace, passwords should be
        encrypted by AES
      operationId: CreateTenant
      parameters:
      - description: create obtenant request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.CreateOBTenantParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create tenant
      tags:
      - Obtenant
  /api/v1/obtenants/{namespace}/{name}:
    delete:
      consumes:
      - application/json
      description: Delete an obtenant in a specific namespace, ask user to confrim
        the deletion carefully
      operationId: DeleteTenant
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete tenant
      tags:
      - Obtenant
    get:
      consumes:
      - application/json
      description: Get an obtenant in a specific namespace
      operationId: GetTenant
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get tenant
      tags:
      - Obtenant
    patch:
      consumes:
      - application/json
      description: Patch tenant's configuration
      operationId: PatchTenant
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: patch tenant body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.PatchTenant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Patch tenant's configuration
      tags:
      - Obtenant
  /api/v1/obtenants/{namespace}/{name}/backup/{type}/jobs:
    get:
      consumes:
      - application/json
      description: List backup jobs of specific tenant
      operationId: ListBackupJobs
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: backup job type
        enum:
        - FULL
        - INCR
        - CLEAN
        - ARCHIVE
        in: path
        name: type
        required: true
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.BackupJob'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List backup jobs of specific tenant
      tags:
      - Obtenant
  /api/v1/obtenants/{namespace}/{name}/backupPolicy:
    delete:
      consumes:
      - application/json
      description: Delete backup policy of specific tenant
      operationId: DeleteBackupPolicy
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - default: "false"
        description: force delete
        in: query
        name: force
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete backup policy of specific tenant
      tags:
      - Obtenant
    get:
      consumes:
      - application/json
      description: Get backup policy of specific tenant
      operationId: GetBackupPolicy
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.BackupPolicy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get backup policy of specific tenant
      tags:
      - Obtenant
    patch:
      consumes:
      - application/json
      description: Update backup policy of specific tenant
      operationId: UpdateBackupPolicy
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: update backup policy request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.UpdateBackupPolicy'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.BackupPolicy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Update backup policy of specific tenant
      tags:
      - Obtenant
    put:
      consumes:
      - application/json
      description: Create backup policy of specific tenant, passwords should be encrypted
        by AES
      operationId: CreateBackupPolicy
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: create backup policy request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.CreateBackupPolicy'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.BackupPolicy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create backup policy of specific tenant
      tags:
      - Obtenant
  /api/v1/obtenants/{namespace}/{name}/logreplay:
    post:
      consumes:
      - application/json
      description: Replay standby log of specific standby tenant
      operationId: ReplayStandbyLog
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: target timestamp to replay to
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ReplayStandbyLog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Replay standby log of specific standby tenant
      tags:
      - Obtenant
  /api/v1/obtenants/{namespace}/{name}/role:
    post:
      consumes:
      - application/json
      description: Change tenant role of specific tenant, if a tenant is a standby
        tenant, it can be changed to primary tenant, vice versa
      operationId: ChangeTenantRole
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: target role to change to
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ChangeTenantRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Change tenant role of specific tenant
      tags:
      - Obtenant
  /api/v1/obtenants/{namespace}/{name}/userCredentials:
    post:
      consumes:
      - application/json
      description: Change root password of specific tenant, encrypted by AES
      operationId: ChangeUserPassword
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: new password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ChangeUserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Change root password of specific tenant
      tags:
      - Obtenant
  /api/v1/obtenants/{namespace}/{name}/version:
    post:
      consumes:
      - application/json
      description: Upgrade tenant compatibility version of specific tenant to match
        the version of cluster
      operationId: UpgradeTenantVersion
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Upgrade tenant compatibility version of specific tenant
      tags:
      - Obtenant
  /api/v1/obtenants/statistic:
    get:
      consumes:
      - application/json
      description: List statistics information of tenants
      operationId: GetOBTenantStatistic
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.OBTenantStatistic'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List statistics information of tenants
      tags:
      - Obtenant
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Cookie
    type: apiKey
swagger: "2.0"
