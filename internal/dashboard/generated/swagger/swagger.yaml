basePath: /api/v1
definitions:
  alarm.Matcher:
    properties:
      isRegex:
        type: boolean
      name:
        type: string
      value:
        type: string
    type: object
  alarm.Severity:
    enum:
    - critical
    - warning
    - caution
    - info
    type: string
    x-enum-varnames:
    - SeverityCritical
    - SeverityWarning
    - SeverityCaution
    - SeverityInfo
  alert.Alert:
    properties:
      description:
        type: string
      endsAt:
        type: integer
      fingerprint:
        type: string
      instance:
        $ref: '#/definitions/oceanbase.OBInstance'
      labels:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      rule:
        type: string
      severity:
        $ref: '#/definitions/alarm.Severity'
      startsAt:
        type: integer
      status:
        $ref: '#/definitions/alert.Status'
      summary:
        type: string
      updatedAt:
        type: integer
    required:
    - endsAt
    - fingerprint
    - instance
    - rule
    - severity
    - startsAt
    - status
    - updatedAt
    type: object
  alert.AlertFilter:
    properties:
      endTime:
        type: integer
      instance:
        $ref: '#/definitions/oceanbase.OBInstance'
      instanceType:
        $ref: '#/definitions/oceanbase.OBInstanceType'
      keyword:
        type: string
      severity:
        $ref: '#/definitions/alarm.Severity'
      startTime:
        type: integer
    type: object
  alert.State:
    enum:
    - active
    - unprocessed
    - suppressed
    type: string
    x-enum-varnames:
    - StateActive
    - StateUnprocessed
    - StateSuppressed
  alert.Status:
    properties:
      inhibitedBy:
        items:
          type: string
        type: array
      silencedBy:
        items:
          type: string
        type: array
      state:
        $ref: '#/definitions/alert.State'
    required:
    - inhibitedBy
    - silencedBy
    - state
    type: object
  common.AffinitySpec:
    properties:
      key:
        type: string
      type:
        $ref: '#/definitions/common.AffinityType'
      value:
        type: string
    type: object
  common.AffinityType:
    enum:
    - NODE
    - POD
    - POD_ANTI
    type: string
    x-enum-varnames:
    - NodeAffinityType
    - PodAffinityType
    - PodAntiAffinityType
  common.ClusterMode:
    enum:
    - NORMAL
    - STANDALONE
    - SERVICE
    type: string
    x-enum-varnames:
    - ClusterModeNormal
    - ClusterModeStandalone
    - ClusterModeService
  common.KVPair:
    properties:
      key:
        type: string
      value:
        type: string
    type: object
  common.ResourceSpec:
    properties:
      cpu:
        type: integer
      memory:
        type: integer
    type: object
  common.StorageSpec:
    properties:
      size:
        type: integer
      storageClass:
        type: string
    type: object
  models.K8sEvent:
    properties:
      count:
        type: integer
      firstTimestamp:
        type: string
      kind:
        type: string
      lastTimestamp:
        type: string
      message:
        type: string
      name:
        type: string
      namespace:
        type: string
      reason:
        type: string
      resourceName:
        type: string
    type: object
  models.OBBackupPolicy:
    properties:
      archiveDestType:
        type: string
      archiveSwitchPieceInterval:
        type: string
      bakDataDestType:
        type: string
      bakDataFullCrontab:
        type: string
      bakDataIncrCrontab:
        type: string
      encryptBakData:
        type: boolean
      name:
        type: string
      namespace:
        type: string
      runningFlow:
        type: string
      runningTask:
        type: string
      status:
        type: string
      taskStatus:
        type: string
      tenantCR:
        type: string
      tenantName:
        type: string
      uid:
        type: string
    type: object
  models.OBCluster:
    properties:
      clusterId:
        type: integer
      clusterMode:
        type: string
      clusterName:
        type: string
      configuredBackupVolume:
        type: boolean
      configuredMonitor:
        type: boolean
      cpu:
        type: integer
      dataStorage:
        $ref: '#/definitions/models.StorageSpec'
      image:
        type: string
      independentPVC:
        type: boolean
      memory:
        type: integer
      name:
        type: string
      namespace:
        type: string
      redoLogStorage:
        $ref: '#/definitions/models.StorageSpec'
      runningFlow:
        type: string
      runningTask:
        type: string
      singlePVC:
        type: boolean
      status:
        type: string
      sysLogStorage:
        $ref: '#/definitions/models.StorageSpec'
      taskStatus:
        type: string
      uid:
        type: string
      zones:
        items:
          $ref: '#/definitions/models.OBZoneStatus'
        type: array
    type: object
  models.OBServer:
    properties:
      clusterCR:
        type: string
      clusterId:
        type: integer
      clusterName:
        type: string
      cni:
        type: string
      image:
        type: string
      name:
        type: string
      namespace:
        type: string
      podIPHash:
        type: string
      podPhase:
        type: string
      runningFlow:
        type: string
      runningTask:
        type: string
      serviceIPHash:
        type: string
      status:
        type: string
      taskStatus:
        type: string
      uid:
        type: string
      zoneName:
        type: string
    type: object
  models.OBTenant:
    properties:
      archiveDestType:
        type: string
      bakDataDestType:
        type: string
      clusterName:
        type: string
      name:
        type: string
      namespace:
        type: string
      primaryTenant:
        type: string
      runningFlow:
        type: string
      runningTask:
        type: string
      status:
        type: string
      taskStatus:
        type: string
      tenantName:
        type: string
      tenantRole:
        type: string
      topology:
        items:
          $ref: '#/definitions/models.OBTenantResourcePool'
        type: array
      uid:
        type: string
      unitNumber:
        type: integer
    type: object
  models.OBTenantResourcePool:
    properties:
      IOPSWeight:
        type: integer
      logDiskSize:
        type: integer
      maxCPU:
        type: integer
      maxIOPS:
        type: integer
      memorySize:
        type: integer
      minCPU:
        type: integer
      minIOPS:
        type: integer
      priority:
        type: integer
      type:
        type: string
      unitNumber:
        type: integer
      zone:
        type: string
    type: object
  models.OBZone:
    properties:
      clusterCR:
        type: string
      clusterId:
        type: integer
      clusterName:
        type: string
      image:
        type: string
      name:
        type: string
      namespace:
        type: string
      runningFlow:
        type: string
      runningTask:
        type: string
      status:
        type: string
      taskStatus:
        type: string
      uid:
        type: string
    type: object
  models.OBZoneStatus:
    properties:
      replica:
        type: integer
      status:
        type: string
      zoneName:
        type: string
    type: object
  models.StorageSpec:
    properties:
      storageClass:
        type: string
      storageSize:
        type: integer
    type: object
  obproxy.CreateOBProxyParam:
    properties:
      image:
        type: string
      name:
        type: string
      namespace:
        type: string
      obCluster:
        $ref: '#/definitions/obproxy.K8sObject'
      parameters:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      proxyClusterName:
        type: string
      proxySysPassword:
        description: Password should be encrypted
        type: string
      replicas:
        type: integer
      resource:
        $ref: '#/definitions/common.ResourceSpec'
      serviceType:
        default: ClusterIP
        enum:
        - ClusterIP
        - NodePort
        - LoadBalancer
        - ExternalName
        example: ClusterIP
        type: string
    required:
    - image
    - name
    - namespace
    - obCluster
    - proxyClusterName
    - proxySysPassword
    - replicas
    - resource
    - serviceType
    type: object
  obproxy.K8sObject:
    properties:
      name:
        type: string
      namespace:
        type: string
    required:
    - name
    - namespace
    type: object
  obproxy.OBProxy:
    properties:
      creationTime:
        type: string
      image:
        type: string
      name:
        type: string
      namespace:
        type: string
      obCluster:
        $ref: '#/definitions/obproxy.K8sObject'
      parameters:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      pods:
        items:
          $ref: '#/definitions/response.K8sPodInfo'
        type: array
      proxyClusterName:
        type: string
      proxySysSecret:
        type: string
      replicas:
        type: integer
      resource:
        $ref: '#/definitions/common.ResourceSpec'
      service:
        $ref: '#/definitions/response.K8sService'
      serviceIp:
        type: string
      status:
        type: string
    required:
    - creationTime
    - image
    - name
    - namespace
    - obCluster
    - parameters
    - pods
    - proxyClusterName
    - proxySysSecret
    - replicas
    - resource
    - service
    - serviceIp
    - status
    type: object
  obproxy.OBProxyOverview:
    properties:
      creationTime:
        type: string
      image:
        type: string
      name:
        type: string
      namespace:
        type: string
      obCluster:
        $ref: '#/definitions/obproxy.K8sObject'
      proxyClusterName:
        type: string
      replicas:
        type: integer
      serviceIp:
        type: string
      status:
        type: string
    required:
    - creationTime
    - image
    - name
    - namespace
    - obCluster
    - proxyClusterName
    - replicas
    - serviceIp
    - status
    type: object
  obproxy.PatchOBProxyParam:
    properties:
      addedParameters:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      deletedParameters:
        items:
          type: string
        type: array
      image:
        type: string
      replicas:
        type: integer
      resource:
        $ref: '#/definitions/common.ResourceSpec'
      serviceType:
        default: ClusterIP
        enum:
        - ClusterIP
        - NodePort
        - LoadBalancer
        - ExternalName
        example: ClusterIP
        type: string
    type: object
  oceanbase.OBInstance:
    properties:
      obcluster:
        type: string
      observer:
        type: string
      obtenant:
        type: string
      obzone:
        description: obzone may exist in labels
        type: string
      type:
        $ref: '#/definitions/oceanbase.OBInstanceType'
    required:
    - type
    type: object
  oceanbase.OBInstanceType:
    enum:
    - unknown
    - obcluster
    - obzone
    - obtenant
    - observer
    type: string
    x-enum-varnames:
    - TypeUnknown
    - TypeOBCluster
    - TypeOBZone
    - TypeOBTenant
    - TypeOBServer
  param.ChangeTenantRole:
    properties:
      failover:
        type: boolean
      switchover:
        type: boolean
    type: object
  param.ChangeUserPassword:
    properties:
      password:
        type: string
      user:
        description: 'Description: The user name of the database account, only root
          is supported now.'
        type: string
    required:
    - password
    - user
    type: object
  param.CreateBackupPolicy:
    properties:
      archivePath:
        type: string
      bakDataPath:
        type: string
      bakEncryptionPassword:
        example: encryptedPassword
        type: string
      destType:
        description: 'Enum: NFS, OSS'
        example: NFS
        type: string
      jobKeepDays:
        example: 5
        type: integer
      ossAccessId:
        example: encryptedPassword
        type: string
      ossAccessKey:
        example: encryptedPassword
        type: string
      pieceIntervalDays:
        example: 1
        type: integer
      recoveryDays:
        example: 3
        type: integer
      scheduleDates:
        items:
          $ref: '#/definitions/param.ScheduleDate'
        type: array
      scheduleTime:
        description: |-
          Description: HH:MM
          Example: 04:00
        example: "04:00"
        type: string
      scheduleType:
        description: 'Enum: Weekly, Monthly'
        example: Weekly
        type: string
    required:
    - archivePath
    - bakDataPath
    - destType
    type: object
  param.CreateNamespaceParam:
    properties:
      namespace:
        type: string
    type: object
  param.CreateOBClusterParam:
    properties:
      backupVolume:
        $ref: '#/definitions/param.NFSVolumeSpec'
      clusterId:
        type: integer
      clusterName:
        type: string
      mode:
        $ref: '#/definitions/common.ClusterMode'
      monitor:
        $ref: '#/definitions/param.MonitorSpec'
      name:
        type: string
      namespace:
        type: string
      observer:
        $ref: '#/definitions/param.OBServerSpec'
      parameters:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      rootPassword:
        type: string
      topology:
        items:
          $ref: '#/definitions/param.ZoneTopology'
        type: array
    type: object
  param.CreateOBTenantParam:
    properties:
      charset:
        type: string
      connectWhiteList:
        type: string
      name:
        type: string
      namespace:
        type: string
      obcluster:
        type: string
      pools:
        items:
          $ref: '#/definitions/param.ResourcePoolSpec'
        type: array
      rootPassword:
        type: string
      source:
        $ref: '#/definitions/param.TenantSourceSpec'
      tenantName:
        type: string
      tenantRole:
        description: 'Enum: Primary, Standby'
        type: string
      unitConfig:
        $ref: '#/definitions/param.UnitConfig'
      unitNum:
        type: integer
    required:
    - name
    - namespace
    - obcluster
    - pools
    - rootPassword
    - tenantName
    - unitConfig
    - unitNum
    type: object
  param.LoginParam:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  param.MetricQuery:
    properties:
      groupLabels:
        items:
          type: string
        type: array
      labels:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      metrics:
        items:
          type: string
        type: array
      queryRange:
        $ref: '#/definitions/param.QueryRange'
    type: object
  param.MonitorSpec:
    properties:
      image:
        type: string
      resource:
        $ref: '#/definitions/common.ResourceSpec'
    type: object
  param.NFSVolumeSpec:
    properties:
      address:
        type: string
      path:
        type: string
    type: object
  param.OBServerSpec:
    properties:
      image:
        type: string
      resource:
        $ref: '#/definitions/common.ResourceSpec'
      storage:
        $ref: '#/definitions/param.OBServerStorageSpec'
    type: object
  param.OBServerStorageSpec:
    properties:
      data:
        $ref: '#/definitions/common.StorageSpec'
      log:
        $ref: '#/definitions/common.StorageSpec'
      redoLog:
        $ref: '#/definitions/common.StorageSpec'
    type: object
  param.PatchTenant:
    properties:
      unitConfig:
        allOf:
        - $ref: '#/definitions/param.PatchUnitConfig'
        description: |-
          Deprecated
          Description: Deprecated, use PATCH /obtenants/:namespace/:name/pools/:zoneName instead
      unitNum:
        type: integer
    type: object
  param.PatchUnitConfig:
    properties:
      pools:
        items:
          $ref: '#/definitions/param.ResourcePoolSpec'
        type: array
      unitConfig:
        $ref: '#/definitions/param.UnitConfig'
    required:
    - pools
    - unitConfig
    type: object
  param.QueryRange:
    properties:
      endTimestamp:
        type: number
      startTimestamp:
        type: number
      step:
        type: integer
    type: object
  param.ReplayStandbyLog:
    properties:
      timestamp:
        example: "2024-02-23 17:47:00"
        type: string
      unlimited:
        type: boolean
    type: object
  param.ResourcePoolSpec:
    properties:
      priority:
        type: integer
      type:
        description: 'Enum: Readonly, Full'
        type: string
      zone:
        type: string
    required:
    - zone
    type: object
  param.RestoreSourceSpec:
    properties:
      archiveSource:
        type: string
      bakDataSource:
        type: string
      bakEncryptionPassword:
        type: string
      ossAccessId:
        type: string
      ossAccessKey:
        type: string
      type:
        description: 'Enum: OSS, NFS'
        type: string
      until:
        $ref: '#/definitions/param.RestoreUntilConfig'
    required:
    - archiveSource
    - bakDataSource
    - type
    type: object
  param.RestoreUntilConfig:
    properties:
      timestamp:
        example: "2024-02-23 17:47:00"
        type: string
      unlimited:
        type: boolean
    type: object
  param.ScaleOBServerParam:
    properties:
      replicas:
        type: integer
    type: object
  param.ScheduleDate:
    properties:
      backupType:
        description: 'Enum: Full, Incremental'
        example: Full
        type: string
      day:
        description: 'Description: 1-31 for monthly, 1-7 for weekly'
        example: 3
        type: integer
    required:
    - backupType
    - day
    type: object
  param.TenantPoolSpec:
    properties:
      priority:
        type: integer
      unitConfig:
        $ref: '#/definitions/param.UnitConfig'
    type: object
  param.TenantSourceSpec:
    properties:
      restore:
        $ref: '#/definitions/param.RestoreSourceSpec'
      tenant:
        type: string
    type: object
  param.UnitConfig:
    properties:
      cpuCount:
        type: string
      iopsWeight:
        type: integer
      logDiskSize:
        type: string
      maxIops:
        type: integer
      memorySize:
        type: string
      minIops:
        type: integer
    required:
    - cpuCount
    - memorySize
    type: object
  param.UpdateBackupPolicy:
    properties:
      jobKeepDays:
        example: 5
        type: integer
      pieceIntervalDays:
        example: 1
        type: integer
      recoveryDays:
        example: 3
        type: integer
      scheduleDates:
        items:
          $ref: '#/definitions/param.ScheduleDate'
        type: array
      scheduleTime:
        description: |-
          Description: HH:MM
          Example: 04:00
        example: "04:00"
        type: string
      scheduleType:
        description: 'Enum: Weekly, Monthly'
        example: Weekly
        type: string
      status:
        description: 'Enum: PAUSED, RUNNING'
        example: PAUSED
        type: string
    type: object
  param.UpgradeOBClusterParam:
    properties:
      image:
        type: string
    type: object
  param.ZoneTopology:
    properties:
      affinities:
        items:
          $ref: '#/definitions/common.AffinitySpec'
        type: array
      nodeSelector:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      replicas:
        type: integer
      tolerations:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      zone:
        type: string
    type: object
  payload.Alert:
    properties:
      annotations:
        additionalProperties:
          type: string
        type: object
      endsAt:
        type: string
      generatorURL:
        type: string
      labels:
        additionalProperties:
          type: string
        type: object
      startsAt:
        type: string
      status:
        type: string
    type: object
  payload.WebhookPayload:
    properties:
      alerts:
        items:
          $ref: '#/definitions/payload.Alert'
        type: array
      commonAnnotations:
        additionalProperties:
          type: string
        type: object
      commonLabels:
        additionalProperties:
          type: string
        type: object
      externalURL:
        type: string
      groupKey:
        type: string
      groupLabels:
        additionalProperties:
          type: string
        type: object
      receiver:
        type: string
      status:
        type: string
      version:
        type: string
    type: object
  receiver.Receiver:
    properties:
      config:
        type: string
      name:
        type: string
      type:
        $ref: '#/definitions/receiver.ReceiverType'
    required:
    - config
    - name
    - type
    type: object
  receiver.ReceiverType:
    enum:
    - discord
    - email
    - pagerduty
    - slack
    - webhook
    - opsgenie
    - wechat
    - pushover
    - victorops
    - sns
    - telegram
    - webex
    - msteams
    type: string
    x-enum-varnames:
    - TypeDiscord
    - TypeEmail
    - TypePagerduty
    - TypeSlack
    - TypeWebhook
    - TypeOpsGenie
    - TypeWechat
    - TypePushover
    - TypeVictorOps
    - TypeSNS
    - TypeTelegram
    - TypeWebex
    - TypeMSTeams
  receiver.Template:
    properties:
      template:
        type: string
      type:
        $ref: '#/definitions/receiver.ReceiverType'
    required:
    - template
    - type
    type: object
  response.APIResponse:
    properties:
      data: {}
      message:
        type: string
      successful:
        type: boolean
    required:
    - data
    - message
    - successful
    type: object
  response.BackupJob:
    properties:
      backupPolicyName:
        type: string
      encryptionSecret:
        type: string
      endTime:
        description: End time of the backup job, empty for ARCHIVE job
        type: string
      name:
        type: string
      namespace:
        type: string
      path:
        description: Empty for Clean job
        type: string
      startTime:
        description: Start time of the backup job, StartScnDisplay for ARCHIVE job
        type: string
      status:
        type: string
      statusInDatabase:
        type: string
      tenantName:
        type: string
      type:
        description: 'Enum: FULL, INCR, ARCHIVE, CLEAN'
        type: string
      uid:
        type: string
    required:
    - backupPolicyName
    - name
    - namespace
    - path
    - startTime
    - status
    - statusInDatabase
    - tenantName
    - type
    - uid
    type: object
  response.BackupPolicy:
    properties:
      archivePath:
        type: string
      bakDataPath:
        type: string
      bakEncryptionSecret:
        type: string
      createTime:
        type: string
      destType:
        description: 'Enum: NFS, OSS'
        example: NFS
        type: string
      events:
        items:
          $ref: '#/definitions/response.K8sEvent'
        type: array
      jobKeepDays:
        example: 5
        type: integer
      name:
        type: string
      namespace:
        type: string
      ossAccessSecret:
        type: string
      pieceIntervalDays:
        example: 1
        type: integer
      recoveryDays:
        example: 3
        type: integer
      scheduleDates:
        items:
          $ref: '#/definitions/param.ScheduleDate'
        type: array
      scheduleTime:
        description: |-
          Description: HH:MM
          Example: 04:00
        example: "04:00"
        type: string
      scheduleType:
        description: 'Enum: Weekly, Monthly'
        example: Weekly
        type: string
      status:
        type: string
      tenantName:
        type: string
      uid:
        type: string
    required:
    - archivePath
    - bakDataPath
    - createTime
    - destType
    - events
    - name
    - namespace
    - status
    - tenantName
    - uid
    type: object
  response.ContainerInfo:
    properties:
      image:
        type: string
      limits:
        $ref: '#/definitions/common.ResourceSpec'
      name:
        type: string
      ports:
        items:
          type: integer
        type: array
      ready:
        type: boolean
      requests:
        $ref: '#/definitions/common.ResourceSpec'
      restartCount:
        type: integer
      startTime:
        type: string
    required:
    - image
    - limits
    - name
    - ports
    - ready
    - requests
    - restartCount
    - startTime
    type: object
  response.DashboardInfo:
    properties:
      appName:
        type: string
      publicKey:
        type: string
      reportHost:
        type: string
      reportStatistics:
        type: boolean
      version:
        type: string
    required:
    - appName
    - publicKey
    - reportHost
    - reportStatistics
    - version
    type: object
  response.K8sEvent:
    properties:
      count:
        type: integer
      firstOccur:
        type: integer
      lastSeen:
        type: integer
      message:
        type: string
      namespace:
        type: string
      object:
        type: string
      reason:
        type: string
      type:
        type: string
    required:
    - count
    - firstOccur
    - lastSeen
    - message
    - namespace
    - object
    - reason
    - type
    type: object
  response.K8sNode:
    properties:
      info:
        $ref: '#/definitions/response.K8sNodeInfo'
      resource:
        $ref: '#/definitions/response.K8sNodeResource'
    type: object
  response.K8sNodeCondition:
    properties:
      message:
        type: string
      reason:
        type: string
      type:
        type: string
    required:
    - message
    - reason
    - type
    type: object
  response.K8sNodeInfo:
    properties:
      conditions:
        items:
          $ref: '#/definitions/response.K8sNodeCondition'
        type: array
      cri:
        type: string
      externalIP:
        type: string
      internalIP:
        type: string
      kernel:
        type: string
      labels:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      name:
        type: string
      os:
        type: string
      roles:
        items:
          type: string
        type: array
      status:
        type: string
      uptime:
        type: integer
      version:
        type: string
    required:
    - conditions
    - cri
    - externalIP
    - internalIP
    - kernel
    - labels
    - name
    - os
    - roles
    - status
    - uptime
    - version
    type: object
  response.K8sNodeResource:
    properties:
      cpuFree:
        type: number
      cpuTotal:
        type: number
      cpuUsed:
        type: number
      memoryFree:
        type: number
      memoryTotal:
        type: number
      memoryUsed:
        type: number
    required:
    - cpuFree
    - cpuTotal
    - cpuUsed
    - memoryFree
    - memoryTotal
    - memoryUsed
    type: object
  response.K8sPodInfo:
    properties:
      containers:
        items:
          $ref: '#/definitions/response.ContainerInfo'
        type: array
      message:
        type: string
      name:
        type: string
      namespace:
        type: string
      nodeName:
        type: string
      podIP:
        type: string
      reason:
        type: string
      startTime:
        type: string
      status:
        type: string
    required:
    - containers
    - message
    - name
    - namespace
    - nodeName
    - podIP
    - reason
    - startTime
    - status
    type: object
  response.K8sService:
    properties:
      clusterIP:
        type: string
      externalIP:
        type: string
      name:
        type: string
      namespace:
        type: string
      ports:
        items:
          $ref: '#/definitions/response.K8sServicePort'
        type: array
      type:
        type: string
    type: object
  response.K8sServicePort:
    properties:
      name:
        type: string
      port:
        type: integer
      targetPort:
        type: integer
    type: object
  response.Metric:
    properties:
      labels:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      name:
        type: string
    type: object
  response.MetricClass:
    properties:
      description:
        type: string
      metricGroups:
        items:
          $ref: '#/definitions/response.MetricGroup'
        type: array
      name:
        type: string
    required:
    - description
    - metricGroups
    - name
    type: object
  response.MetricData:
    properties:
      metric:
        $ref: '#/definitions/response.Metric'
      values:
        items:
          $ref: '#/definitions/response.MetricValue'
        type: array
    required:
    - metric
    - values
    type: object
  response.MetricGroup:
    properties:
      description:
        type: string
      metrics:
        items:
          $ref: '#/definitions/response.MetricMeta'
        type: array
      name:
        type: string
    required:
    - description
    - metrics
    - name
    type: object
  response.MetricMeta:
    properties:
      description:
        type: string
      key:
        type: string
      name:
        type: string
      unit:
        type: string
    required:
    - description
    - key
    - name
    - unit
    type: object
  response.MetricValue:
    properties:
      timestamp:
        type: number
      value:
        type: number
    required:
    - timestamp
    - value
    type: object
  response.MonitorSpec:
    properties:
      image:
        type: string
      resource:
        $ref: '#/definitions/response.ResourceSpecRender'
    required:
    - image
    - resource
    type: object
  response.NFSVolumeSpec:
    properties:
      address:
        type: string
      path:
        type: string
    required:
    - address
    - path
    type: object
  response.Namespace:
    properties:
      namespace:
        type: string
      status:
        type: string
    required:
    - namespace
    - status
    type: object
  response.OBCluster:
    properties:
      backupVolume:
        $ref: '#/definitions/response.NFSVolumeSpec'
      clusterId:
        type: integer
      clusterName:
        type: string
      createTime:
        type: integer
      image:
        type: string
      metrics:
        $ref: '#/definitions/response.OBMetrics'
      mode:
        $ref: '#/definitions/common.ClusterMode'
      monitor:
        $ref: '#/definitions/response.MonitorSpec'
      name:
        type: string
      namespace:
        type: string
      parameters:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      resource:
        $ref: '#/definitions/response.ResourceSpecRender'
      rootPasswordSecret:
        type: string
      status:
        type: string
      statusDetail:
        type: string
      storage:
        $ref: '#/definitions/response.OBServerStorage'
      topology:
        items:
          $ref: '#/definitions/response.OBZone'
        type: array
      uid:
        type: string
      version:
        type: string
    required:
    - clusterId
    - clusterName
    - createTime
    - image
    - mode
    - name
    - namespace
    - parameters
    - resource
    - rootPasswordSecret
    - status
    - statusDetail
    - storage
    - topology
    - uid
    type: object
  response.OBClusterOverview:
    properties:
      clusterId:
        type: integer
      clusterName:
        type: string
      createTime:
        type: integer
      image:
        type: string
      mode:
        $ref: '#/definitions/common.ClusterMode'
      name:
        type: string
      namespace:
        type: string
      status:
        type: string
      statusDetail:
        type: string
      topology:
        items:
          $ref: '#/definitions/response.OBZone'
        type: array
      uid:
        type: string
    required:
    - clusterId
    - clusterName
    - createTime
    - image
    - mode
    - name
    - namespace
    - status
    - statusDetail
    - topology
    - uid
    type: object
  response.OBClusterResources:
    properties:
      minPoolMemory:
        example: 2147483648
        type: integer
      obServerResources:
        items:
          $ref: '#/definitions/response.OBServerAvailableResource'
        type: array
      obZoneResourceMap:
        additionalProperties:
          $ref: '#/definitions/response.OBZoneAvailableResource'
        type: object
    required:
    - minPoolMemory
    type: object
  response.OBClusterStatistic:
    properties:
      count:
        type: integer
      status:
        type: string
    required:
    - count
    - status
    type: object
  response.OBConnection:
    properties:
      clientIp:
        type: string
      cluster:
        type: string
      namespace:
        type: string
      pod:
        type: string
      tenant:
        type: string
      terminalId:
        type: string
      user:
        type: string
    type: object
  response.OBMetrics:
    properties:
      cpuPercent:
        type: integer
      diskPercent:
        type: integer
      memoryPercent:
        type: integer
    required:
    - cpuPercent
    - diskPercent
    - memoryPercent
    type: object
  response.OBServer:
    properties:
      address:
        type: string
      metrics:
        $ref: '#/definitions/response.OBMetrics'
      name:
        type: string
      namespace:
        type: string
      status:
        type: string
      statusDetail:
        type: string
    required:
    - address
    - name
    - namespace
    - status
    - statusDetail
    type: object
  response.OBServerAvailableResource:
    properties:
      availableCPU:
        example: 12
        type: integer
      availableDataDisk:
        example: 16106127360
        type: integer
      availableLogDisk:
        example: 5368709120
        type: integer
      availableMemory:
        example: 5368709120
        type: integer
      obServerIP:
        type: string
      obZone:
        example: zone1
        type: string
      serverCount:
        example: 3
        type: integer
    required:
    - availableCPU
    - availableDataDisk
    - availableLogDisk
    - availableMemory
    - obServerIP
    - obZone
    - serverCount
    type: object
  response.OBServerStorage:
    properties:
      dataStorage:
        $ref: '#/definitions/response.StorageSpec'
      redoLogStorage:
        $ref: '#/definitions/response.StorageSpec'
      sysLogStorage:
        $ref: '#/definitions/response.StorageSpec'
    required:
    - dataStorage
    - redoLogStorage
    - sysLogStorage
    type: object
  response.OBTenantDetail:
    properties:
      charset:
        description: Charset of the tenant
        type: string
      clusterResourceName:
        description: Name of the cluster belonging to
        type: string
      createTime:
        description: Creation time of the tenant
        type: string
      locality:
        description: Locality of the tenant units
        type: string
      name:
        description: Name of the resource
        type: string
      namespace:
        description: Namespace of the resource
        type: string
      primaryTenant:
        type: string
      primaryZone:
        description: Primary zone of the tenant
        type: string
      restoreSource:
        $ref: '#/definitions/response.RestoreSource'
      rootCredential:
        type: string
      standbyROCredential:
        type: string
      status:
        description: Status of the tenant
        type: string
      tenantName:
        description: Name of the tenant in the database
        type: string
      tenantRole:
        description: 'Enum: Primary, Standby'
        type: string
      topology:
        description: Topology of the tenant
        items:
          $ref: '#/definitions/response.OBTenantReplica'
        type: array
      uid:
        description: Unique identifier of the resource
        type: string
      unitNumber:
        description: Number of units in every zone
        type: integer
      version:
        type: string
    required:
    - charset
    - clusterResourceName
    - createTime
    - locality
    - name
    - namespace
    - primaryZone
    - status
    - tenantName
    - tenantRole
    - uid
    - unitNumber
    type: object
  response.OBTenantOverview:
    description: Brief information about OBTenant
    properties:
      charset:
        description: Charset of the tenant
        type: string
      clusterResourceName:
        description: Name of the cluster belonging to
        type: string
      createTime:
        description: Creation time of the tenant
        type: string
      locality:
        description: Locality of the tenant units
        type: string
      name:
        description: Name of the resource
        type: string
      namespace:
        description: Namespace of the resource
        type: string
      primaryZone:
        description: Primary zone of the tenant
        type: string
      status:
        description: Status of the tenant
        type: string
      tenantName:
        description: Name of the tenant in the database
        type: string
      tenantRole:
        description: 'Enum: Primary, Standby'
        type: string
      topology:
        description: Topology of the tenant
        items:
          $ref: '#/definitions/response.OBTenantReplica'
        type: array
      uid:
        description: Unique identifier of the resource
        type: string
      unitNumber:
        description: Number of units in every zone
        type: integer
    required:
    - charset
    - clusterResourceName
    - createTime
    - locality
    - name
    - namespace
    - primaryZone
    - status
    - tenantName
    - tenantRole
    - uid
    - unitNumber
    type: object
  response.OBTenantReplica:
    properties:
      iopsWeight:
        type: integer
      logDiskSize:
        type: string
      maxCPU:
        type: string
      maxIops:
        type: integer
      memorySize:
        type: string
      minCPU:
        type: string
      minIops:
        type: integer
      priority:
        type: integer
      type:
        description: 'Enum: Readonly, Full'
        type: string
      zone:
        type: string
    required:
    - iopsWeight
    - logDiskSize
    - maxCPU
    - maxIops
    - memorySize
    - minCPU
    - minIops
    - priority
    - type
    - zone
    type: object
  response.OBTenantStatistic:
    properties:
      count:
        type: integer
      status:
        type: string
    required:
    - count
    - status
    type: object
  response.OBZone:
    properties:
      affinities:
        items:
          $ref: '#/definitions/common.AffinitySpec'
        type: array
      name:
        type: string
      namespace:
        type: string
      nodeSelector:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      observers:
        items:
          $ref: '#/definitions/response.OBServer'
        type: array
      replicas:
        type: integer
      rootService:
        type: string
      status:
        type: string
      statusDetail:
        type: string
      tolerations:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      zone:
        type: string
    required:
    - name
    - namespace
    - replicas
    - status
    - statusDetail
    - zone
    type: object
  response.OBZoneAvailableResource:
    properties:
      availableCPU:
        example: 12
        type: integer
      availableDataDisk:
        example: 16106127360
        type: integer
      availableLogDisk:
        example: 5368709120
        type: integer
      availableMemory:
        example: 5368709120
        type: integer
      obZone:
        example: zone1
        type: string
      serverCount:
        example: 3
        type: integer
    required:
    - availableCPU
    - availableDataDisk
    - availableLogDisk
    - availableMemory
    - obZone
    - serverCount
    type: object
  response.ResourceSpecRender:
    properties:
      cpu:
        type: integer
      memory:
        type: string
    required:
    - cpu
    - memory
    type: object
  response.RestoreSource:
    properties:
      archiveSource:
        type: string
      bakDataSource:
        type: string
      bakEncryptionSecret:
        type: string
      ossAccessSecret:
        type: string
      type:
        description: 'Enum: OSS, NFS'
        type: string
      until:
        type: string
    required:
    - archiveSource
    - bakDataSource
    - type
    type: object
  response.StatisticData:
    properties:
      backupPolicies:
        items:
          $ref: '#/definitions/models.OBBackupPolicy'
        type: array
      clusters:
        items:
          $ref: '#/definitions/models.OBCluster'
        type: array
      k8sNodes:
        items:
          $ref: '#/definitions/response.K8sNode'
        type: array
      operatorVersion:
        type: string
      servers:
        items:
          $ref: '#/definitions/models.OBServer'
        type: array
      tenants:
        items:
          $ref: '#/definitions/models.OBTenant'
        type: array
      warningEvents:
        items:
          $ref: '#/definitions/models.K8sEvent'
        type: array
      zones:
        items:
          $ref: '#/definitions/models.OBZone'
        type: array
    required:
    - backupPolicies
    - clusters
    - k8sNodes
    - servers
    - tenants
    - warningEvents
    - zones
    type: object
  response.StorageClass:
    properties:
      allowVolumeExpansion:
        type: boolean
      mountOptions:
        items:
          type: string
        type: array
      name:
        type: string
      parameters:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      provisioner:
        type: string
      reclaimPolicy:
        type: string
      volumeBindingMode:
        type: string
    required:
    - allowVolumeExpansion
    - name
    - provisioner
    - reclaimPolicy
    - volumeBindingMode
    type: object
  response.StorageSpec:
    properties:
      size:
        type: string
      storageClass:
        type: string
    required:
    - size
    - storageClass
    type: object
  route.Route:
    properties:
      aggregateLabels:
        items:
          type: string
        type: array
      groupInterval:
        type: integer
      groupWait:
        type: integer
      matchers:
        items:
          $ref: '#/definitions/alarm.Matcher'
        type: array
      receiver:
        type: string
      repeatInterval:
        type: integer
    required:
    - aggregateLabels
    - groupInterval
    - groupWait
    - matchers
    - receiver
    - repeatInterval
    type: object
  route.RouteResponse:
    properties:
      aggregateLabels:
        items:
          type: string
        type: array
      groupInterval:
        type: integer
      groupWait:
        type: integer
      id:
        type: string
      matchers:
        items:
          $ref: '#/definitions/alarm.Matcher'
        type: array
      receiver:
        type: string
      repeatInterval:
        type: integer
    required:
    - aggregateLabels
    - groupInterval
    - groupWait
    - id
    - matchers
    - receiver
    - repeatInterval
    type: object
  rule.Rule:
    properties:
      description:
        type: string
      duration:
        type: integer
      instanceType:
        $ref: '#/definitions/oceanbase.OBInstanceType'
      labels:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      name:
        type: string
      query:
        type: string
      severity:
        $ref: '#/definitions/alarm.Severity'
      summary:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/rule.RuleType'
        default: customized
    required:
    - description
    - duration
    - instanceType
    - labels
    - name
    - query
    - severity
    - summary
    type: object
  rule.RuleFilter:
    properties:
      instanceType:
        $ref: '#/definitions/oceanbase.OBInstanceType'
      keyword:
        type: string
      severity:
        $ref: '#/definitions/alarm.Severity'
    type: object
  rule.RuleHealth:
    enum:
    - unknown
    - ok
    - error
    type: string
    x-enum-varnames:
    - HealthUnknown
    - HealthOK
    - HealthError
  rule.RuleResponse:
    properties:
      description:
        type: string
      duration:
        type: integer
      evaluationTime:
        type: number
      health:
        $ref: '#/definitions/rule.RuleHealth'
      instanceType:
        $ref: '#/definitions/oceanbase.OBInstanceType'
      keepFiringFor:
        type: integer
      labels:
        items:
          $ref: '#/definitions/common.KVPair'
        type: array
      lastError:
        type: string
      lastEvaluation:
        type: integer
      name:
        type: string
      query:
        type: string
      severity:
        $ref: '#/definitions/alarm.Severity'
      state:
        $ref: '#/definitions/rule.RuleState'
      summary:
        type: string
      type:
        allOf:
        - $ref: '#/definitions/rule.RuleType'
        default: customized
    required:
    - description
    - duration
    - evaluationTime
    - health
    - instanceType
    - keepFiringFor
    - labels
    - lastEvaluation
    - name
    - query
    - severity
    - state
    - summary
    type: object
  rule.RuleState:
    enum:
    - active
    - inactive
    type: string
    x-enum-varnames:
    - StateActive
    - StateInactive
  rule.RuleType:
    enum:
    - builtin
    - customized
    type: string
    x-enum-varnames:
    - TypeBuiltin
    - TypeCustomized
  silence.SilencerFilter:
    properties:
      instance:
        $ref: '#/definitions/oceanbase.OBInstance'
      instanceType:
        $ref: '#/definitions/oceanbase.OBInstanceType'
      keyword:
        type: string
    type: object
  silence.SilencerParam:
    properties:
      comment:
        type: string
      createdBy:
        type: string
      endsAt:
        type: integer
      id:
        type: string
      instances:
        items:
          $ref: '#/definitions/oceanbase.OBInstance'
        type: array
      matchers:
        items:
          $ref: '#/definitions/alarm.Matcher'
        type: array
      rules:
        items:
          type: string
        type: array
      startsAt:
        type: integer
    required:
    - comment
    - createdBy
    - endsAt
    - instances
    - matchers
    - rules
    - startsAt
    type: object
  silence.SilencerResponse:
    properties:
      comment:
        type: string
      createdBy:
        type: string
      endsAt:
        type: integer
      id:
        type: string
      instances:
        items:
          $ref: '#/definitions/oceanbase.OBInstance'
        type: array
      matchers:
        items:
          $ref: '#/definitions/alarm.Matcher'
        type: array
      startsAt:
        type: integer
      status:
        $ref: '#/definitions/silence.Status'
      updatedAt:
        type: integer
    required:
    - comment
    - createdBy
    - endsAt
    - id
    - instances
    - matchers
    - startsAt
    - status
    - updatedAt
    type: object
  silence.State:
    enum:
    - active
    - expired
    - pending
    type: string
    x-enum-varnames:
    - StateActive
    - StateExpired
    - StatePending
  silence.Status:
    properties:
      state:
        $ref: '#/definitions/silence.State'
    required:
    - state
    type: object
info:
  contact: {}
  description: OceanBase Dashboard
  title: OceanBase Dashboard API
  version: "1.0"
paths:
  /api/v1/alarm/alert/alerts:
    post:
      consumes:
      - application/json
      description: List alerts, filter with alarm objects, severity, time and keywords.
      operationId: ListAlerts
      parameters:
      - description: alert filter
        in: body
        name: body
        schema:
          $ref: '#/definitions/alert.AlertFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/alert.Alert'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List alerts
      tags:
      - Alarm
  /api/v1/alarm/receiver/receivers:
    post:
      consumes:
      - application/json
      description: List alarm receivers, do not support filter, list all receivers
        at once.
      operationId: ListReceivers
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/receiver.Receiver'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List alarm receivers
      tags:
      - Alarm
    put:
      consumes:
      - application/json
      description: Create or update alarm receiver.
      operationId: CreateOrUpdateReceiver
      parameters:
      - description: receiver
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/receiver.Receiver'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/receiver.Receiver'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create or update alarm receiver
      tags:
      - Alarm
  /api/v1/alarm/receiver/receivers/{name}:
    delete:
      consumes:
      - application/json
      description: Delete alarm receiver by receiver name.
      operationId: DeleteReceiver
      parameters:
      - description: receiver name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete alarm receiver
      tags:
      - Alarm
    get:
      consumes:
      - application/json
      description: Get alarm receiver, query by receiver name.
      operationId: GetReceiver
      parameters:
      - description: rule name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/receiver.Receiver'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get alarm receiver
      tags:
      - Alarm
  /api/v1/alarm/receiver/templates:
    post:
      consumes:
      - application/json
      description: List alarm receiver templates.
      operationId: ListReceiverTemplates
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/receiver.Template'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List alarm receiver templates
      tags:
      - Alarm
  /api/v1/alarm/receiver/templates/{type}:
    get:
      consumes:
      - application/json
      description: Get alarm receiver template.
      operationId: GetReceiverTemplate
      parameters:
      - description: receiver type
        in: path
        name: type
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/receiver.Template'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get alarm receiver template
      tags:
      - Alarm
  /api/v1/alarm/route/routes:
    post:
      consumes:
      - application/json
      description: List alarm routes, do not support filter, list all routes at once.
      operationId: ListRoutes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/route.RouteResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List alarm routes
      tags:
      - Alarm
    put:
      consumes:
      - application/json
      description: Create or update alarm route.
      operationId: CreateOrUpdateRoute
      parameters:
      - description: route
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/route.Route'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/route.RouteResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create or update alarm route
      tags:
      - Alarm
  /api/v1/alarm/route/routes/{id}:
    delete:
      consumes:
      - application/json
      description: Delete alarm channel by channel name.
      operationId: DeleteRoute
      parameters:
      - description: route id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete alarm channel
      tags:
      - Alarm
    get:
      consumes:
      - application/json
      description: Get alarm route, query by route name.
      operationId: GetRoute
      parameters:
      - description: route id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/route.RouteResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get alarm route
      tags:
      - Alarm
  /api/v1/alarm/rule/rules:
    post:
      consumes:
      - application/json
      description: List alarm rules, filter with alarm objects type, severity and
        keywords.
      operationId: ListRules
      parameters:
      - description: rule filter
        in: body
        name: body
        schema:
          $ref: '#/definitions/rule.RuleFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/rule.RuleResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List alarm rules
      tags:
      - Alarm
    put:
      consumes:
      - application/json
      description: Create or update alarm rule.
      operationId: CreateOrUpdateRule
      parameters:
      - description: rule
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/rule.Rule'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/rule.RuleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create or update alarm rule
      tags:
      - Alarm
  /api/v1/alarm/rule/rules/{name}:
    delete:
      consumes:
      - application/json
      description: Delete alarm rule by rule name.
      operationId: DeleteRule
      parameters:
      - description: rule name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete alarm rule
      tags:
      - Alarm
    get:
      consumes:
      - application/json
      description: Get alarm rule, query by rule name.
      operationId: GetRule
      parameters:
      - description: rule name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/rule.RuleResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get alarm rule
      tags:
      - Alarm
  /api/v1/alarm/silence/silencers:
    post:
      consumes:
      - application/json
      description: List alarm silencers, filter with alarm objects and keywords.
      operationId: ListSilencers
      parameters:
      - description: silencer filter
        in: body
        name: body
        schema:
          $ref: '#/definitions/silence.SilencerFilter'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/silence.SilencerResponse'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List alarm silencers
      tags:
      - Alarm
    put:
      consumes:
      - application/json
      description: Create or update alarm silencer.
      operationId: CreateOrUpdateSilencer
      parameters:
      - description: silencer
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/silence.SilencerParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/silence.SilencerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create or update alarm silencer
      tags:
      - Alarm
  /api/v1/alarm/silence/silencers/{id}:
    delete:
      consumes:
      - application/json
      description: Delete alarm silencer by silencer id.
      operationId: DeleteSilencer
      parameters:
      - description: silencer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete alarm silencer
      tags:
      - Alarm
    get:
      consumes:
      - application/json
      description: Get alarm silencer, query by silencer id.
      operationId: GetSilencer
      parameters:
      - description: silencer id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/silence.SilencerResponse'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get alarm silencer
      tags:
      - Alarm
  /api/v1/cluster/events:
    get:
      consumes:
      - application/json
      description: list k8s events
      operationId: ListK8sEvents
      parameters:
      - description: related object types
        enum:
        - OBCLUSTER
        - OBTENANT
        - OBBACKUPPOLICY
        - OBPROXY
        in: query
        name: objectType
        type: string
      - description: event level
        enum:
        - NORMAL
        - WARNING
        in: query
        name: type
        type: string
      - description: Object name
        in: query
        name: name
        type: string
      - description: Namespace
        in: query
        name: namespace
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.K8sEvent'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list k8s event
      tags:
      - Cluster
  /api/v1/cluster/namespaces:
    get:
      consumes:
      - application/json
      description: list k8s namespaces
      operationId: ListK8sNamespaces
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.Namespace'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list k8s namespaces
      tags:
      - Cluster
    post:
      consumes:
      - application/json
      description: create k8s namespace
      operationId: CreateK8sNamespace
      parameters:
      - description: create obcluster request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.CreateNamespaceParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: create k8s namespace
      tags:
      - Cluster
  /api/v1/cluster/nodes:
    get:
      consumes:
      - application/json
      description: list k8s nodes
      operationId: ListK8sNodes
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.K8sNode'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list k8s nodes
      tags:
      - Cluster
  /api/v1/cluster/storageClasses:
    get:
      consumes:
      - application/json
      description: list k8s storage classes
      operationId: ListK8sStorageClasses
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.StorageClass'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list k8s storage classes
      tags:
      - Cluster
  /api/v1/conn/{terminalId}:
    get:
      consumes:
      - application/json
      description: Connect to oceanbase database in websocket
      operationId: ConnectDatabase
      parameters:
      - description: terminalId
        in: path
        name: terminalId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBConnection'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Connect to oceanbase database
      tags:
      - Terminal
  /api/v1/info:
    get:
      consumes:
      - application/json
      description: Get process info of OceanBase Dashboard, including process name
        etc.
      operationId: GetProcessInfo
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.DashboardInfo'
              type: object
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Get process info
      tags:
      - Info
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: User login and return access token with cookie.
      operationId: Login
      parameters:
      - description: login
        in: body
        name: loginInfo
        required: true
        schema:
          $ref: '#/definitions/param.LoginParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: User login
      tags:
      - User
  /api/v1/logout:
    post:
      description: User logout and clear session.
      operationId: Logout
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: User logout
      tags:
      - User
  /api/v1/metrics:
    get:
      consumes:
      - application/json
      description: list all metrics meta info, return by groups
      operationId: ListAllMetrics
      parameters:
      - description: metrics scope
        enum:
        - OBCLUSTER
        - OBTENANT
        in: query
        name: scope
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.MetricClass'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list all metrics
      tags:
      - Metric
  /api/v1/metrics/query:
    post:
      consumes:
      - application/json
      description: query metric data
      operationId: QueryMetrics
      parameters:
      - description: metric query request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.MetricQuery'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.MetricData'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: query metrics
      tags:
      - Metric
  /api/v1/obclusters:
    get:
      consumes:
      - application/json
      description: list obclusters
      operationId: ListOBClusters
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.OBClusterOverview'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list obclusters
      tags:
      - OBCluster
    post:
      consumes:
      - application/json
      description: create obcluster
      operationId: CreateOBCluster
      parameters:
      - description: create obcluster request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.CreateOBClusterParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBCluster'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: create obcluster
      tags:
      - OBCluster
  /api/v1/obclusters/{namespace}/{name}/related-events:
    get:
      consumes:
      - application/json
      description: list related events of specific obcluster, including obzone and
        observer.
      operationId: ListOBClusterRelatedEvents
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.K8sEvent'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list related events
      tags:
      - OBCluster
  /api/v1/obclusters/{namespace}/{name}/resource-usages:
    get:
      consumes:
      - application/json
      description: list resource usages of specific obcluster, such as cpu, memory,
        storage, etc. The old router ending with /essential-parameters is deprecated
      operationId: ListOBClusterResources
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBClusterResources'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list resource usages, the old router ending with /essential-parameters
        is deprecated
      tags:
      - OBCluster
  /api/v1/obclusters/namespace/{namespace}/name/{name}:
    delete:
      consumes:
      - application/json
      description: delete obcluster
      operationId: DeleteOBCluster
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  type: boolean
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: delete obcluster
      tags:
      - OBCluster
    get:
      consumes:
      - application/json
      description: get obcluster detailed info
      operationId: GetOBCluster
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBCluster'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: get obcluster
      tags:
      - OBCluster
    post:
      consumes:
      - application/json
      description: upgrade obcluster
      operationId: UpgradeOBCluster
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      - description: upgrade obcluster request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.UpgradeOBClusterParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBCluster'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: upgrade obcluster
      tags:
      - OBCluster
  /api/v1/obclusters/namespace/{namespace}/name/{name}/obzones:
    post:
      consumes:
      - application/json
      description: add obzone
      operationId: AddOBZone
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      - description: add obzone request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ZoneTopology'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBCluster'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: add obzone
      tags:
      - OBCluster
  /api/v1/obclusters/namespace/{namespace}/name/{name}/obzones/{obzoneName}:
    delete:
      consumes:
      - application/json
      description: delete obzone
      operationId: DeleteOBZone
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      - description: obzone name
        in: path
        name: obzoneName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBCluster'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: delete obzone
      tags:
      - OBCluster
  /api/v1/obclusters/namespace/{namespace}/name/{name}/obzones/{obzoneName}/scale:
    post:
      consumes:
      - application/json
      description: scale observer
      operationId: ScaleOBServer
      parameters:
      - description: obcluster namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obcluster name
        in: path
        name: name
        required: true
        type: string
      - description: obzone name
        in: path
        name: obzoneName
        required: true
        type: string
      - description: scale observer request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ScaleOBServerParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBCluster'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: scale observer
      tags:
      - OBCluster
  /api/v1/obclusters/namespace/{namespace}/name/{name}/terminal:
    put:
      consumes:
      - application/json
      description: Create oceanbase cluster connection terminal
      operationId: CreateOBClusterConnection
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBConnection'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create oceanbase cluster connection
      tags:
      - Terminal
  /api/v1/obclusters/statistic:
    get:
      consumes:
      - application/json
      description: get obcluster statistic info
      operationId: GetOBClusterStatistic
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.OBClusterStatistic'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: get obcluster statistic
      tags:
      - OBCluster
  /api/v1/obproxies:
    get:
      consumes:
      - application/json
      description: list obproxies
      operationId: ListOBProxies
      parameters:
      - description: ns
        in: query
        name: ns
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/obproxy.OBProxyOverview'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: list obproxies
      tags:
      - OBProxy
    put:
      consumes:
      - application/json
      description: Create OBProxy with the specified parameters
      operationId: CreateOBPROXY
      parameters:
      - description: Request body for creating obproxy
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/obproxy.CreateOBProxyParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/obproxy.OBProxy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create OBProxy
      tags:
      - OBProxy
  /api/v1/obproxies/{namespace}/{name}:
    delete:
      consumes:
      - application/json
      description: Delete OBProxy by namespace and name
      operationId: DeleteOBProxy
      parameters:
      - description: namespace of obproxy deployment
        in: path
        name: namespace
        required: true
        type: string
      - description: name of obproxy deployment
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/obproxy.OBProxy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete OBProxy
      tags:
      - OBProxy
    get:
      consumes:
      - application/json
      description: Get OBProxy by namespace and name
      operationId: GetOBProxy
      parameters:
      - description: namespace of obproxy deployment
        in: path
        name: namespace
        required: true
        type: string
      - description: name of obproxy deployment
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/obproxy.OBProxy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get OBProxy
      tags:
      - OBProxy
    patch:
      consumes:
      - application/json
      description: Patch OBProxy with the specified parameters
      operationId: PatchOBProxy
      parameters:
      - description: Request body for patching obproxy
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/obproxy.PatchOBProxyParam'
      - description: namespace of obproxy deployment
        in: path
        name: namespace
        required: true
        type: string
      - description: name of obproxy deployment
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/obproxy.OBProxy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Patch OBProxy
      tags:
      - OBProxy
  /api/v1/obtenants:
    get:
      consumes:
      - application/json
      description: List all tenants and return them
      operationId: ListAllTenants
      parameters:
      - description: obcluster to filter
        in: query
        name: obcluster
        type: string
      - description: namespace to filter
        in: query
        name: ns
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.OBTenantOverview'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List all tenants
      tags:
      - OBTenant
    put:
      consumes:
      - application/json
      description: Create an obtenant in a specific namespace, passwords should be
        encrypted by AES
      operationId: CreateTenant
      parameters:
      - description: create obtenant request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.CreateOBTenantParam'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create tenant
      tags:
      - OBTenant
  /api/v1/obtenants/{namespace}/{name}:
    delete:
      consumes:
      - application/json
      description: Delete an obtenant in a specific namespace, ask user to confrim
        the deletion carefully
      operationId: DeleteTenant
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete tenant
      tags:
      - OBTenant
    get:
      consumes:
      - application/json
      description: Get an obtenant in a specific namespace
      operationId: GetTenant
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get tenant
      tags:
      - OBTenant
    patch:
      consumes:
      - application/json
      description: Patch tenant's configuration
      operationId: PatchTenant
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: patch tenant body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.PatchTenant'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Patch tenant's configuration
      tags:
      - OBTenant
  /api/v1/obtenants/{namespace}/{name}/backup/{type}/jobs:
    get:
      consumes:
      - application/json
      description: List backup jobs of specific tenant
      operationId: ListBackupJobs
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: backup job type
        enum:
        - FULL
        - INC
        - CLEAN
        - ARCHIVE
        in: path
        name: type
        required: true
        type: string
      - default: 10
        description: limit
        in: query
        name: limit
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.BackupJob'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List backup jobs of specific tenant
      tags:
      - OBTenant
  /api/v1/obtenants/{namespace}/{name}/backupPolicy:
    delete:
      consumes:
      - application/json
      description: Delete backup policy of specific tenant
      operationId: DeleteBackupPolicy
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - default: "false"
        description: force delete
        in: query
        name: force
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/response.APIResponse'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete backup policy of specific tenant
      tags:
      - OBTenant
    get:
      consumes:
      - application/json
      description: Get backup policy of specific tenant
      operationId: GetBackupPolicy
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.BackupPolicy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Get backup policy of specific tenant
      tags:
      - OBTenant
    patch:
      consumes:
      - application/json
      description: Update backup policy of specific tenant
      operationId: UpdateBackupPolicy
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: update backup policy request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.UpdateBackupPolicy'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.BackupPolicy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Update backup policy of specific tenant
      tags:
      - OBTenant
    put:
      consumes:
      - application/json
      description: Create backup policy of specific tenant, passwords should be encrypted
        by AES
      operationId: CreateBackupPolicy
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: create backup policy request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.CreateBackupPolicy'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.BackupPolicy'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create backup policy of specific tenant
      tags:
      - OBTenant
  /api/v1/obtenants/{namespace}/{name}/logreplay:
    post:
      consumes:
      - application/json
      description: Replay standby log of specific standby tenant
      operationId: ReplayStandbyLog
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: target timestamp to replay to
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ReplayStandbyLog'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Replay standby log of specific standby tenant
      tags:
      - OBTenant
  /api/v1/obtenants/{namespace}/{name}/pools/{zoneName}:
    delete:
      consumes:
      - application/json
      description: Delete an obtenant pool in a specific namespace
      operationId: DeleteOBTenantPool
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: obzone name
        in: path
        name: zoneName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Delete obtenant pool
      tags:
      - OBTenant
    patch:
      consumes:
      - application/json
      description: Patch an obtenant pool in a specific namespace
      operationId: PatchOBTenantPool
      parameters:
      - description: patch obtenant pool request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.TenantPoolSpec'
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: obzone name
        in: path
        name: zoneName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Patch obtenant pool
      tags:
      - OBTenant
    put:
      consumes:
      - application/json
      description: Create an obtenant pool in a specific namespace
      operationId: CreateOBTenantPool
      parameters:
      - description: create obtenant pool request body
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.TenantPoolSpec'
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: obzone name
        in: path
        name: zoneName
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create obtenant pool
      tags:
      - OBTenant
  /api/v1/obtenants/{namespace}/{name}/related-events:
    get:
      consumes:
      - application/json
      description: List related events of specific tenant, including restore, backup
        and backup policy events
      operationId: ListOBTenantRelatedEvents
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.K8sEvent'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List related events of specific tenant
      tags:
      - OBTenant
  /api/v1/obtenants/{namespace}/{name}/role:
    post:
      consumes:
      - application/json
      description: Change tenant role of specific tenant, if a tenant is a standby
        tenant, it can be changed to primary tenant, vice versa
      operationId: ChangeTenantRole
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: target role to change to
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ChangeTenantRole'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Change tenant role of specific tenant
      tags:
      - OBTenant
  /api/v1/obtenants/{namespace}/{name}/terminal:
    put:
      consumes:
      - application/json
      description: Create oceanbase tenant connection terminal
      operationId: CreateOBTenantConnection
      parameters:
      - description: namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBConnection'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Create oceanbase tenant connection
      tags:
      - Terminal
  /api/v1/obtenants/{namespace}/{name}/userCredentials:
    post:
      consumes:
      - application/json
      description: Change root password of specific tenant, encrypted by AES
      operationId: ChangeUserPassword
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      - description: new password
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/param.ChangeUserPassword'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Change root password of specific tenant
      tags:
      - OBTenant
  /api/v1/obtenants/{namespace}/{name}/version:
    post:
      consumes:
      - application/json
      description: Upgrade tenant compatibility version of specific tenant to match
        the version of cluster
      operationId: UpgradeTenantVersion
      parameters:
      - description: obtenant namespace
        in: path
        name: namespace
        required: true
        type: string
      - description: obtenant name
        in: path
        name: name
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.OBTenantDetail'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: Upgrade tenant compatibility version of specific tenant
      tags:
      - OBTenant
  /api/v1/obtenants/statistic:
    get:
      consumes:
      - application/json
      description: List statistics information of tenants
      operationId: GetOBTenantStatistic
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  items:
                    $ref: '#/definitions/response.OBTenantStatistic'
                  type: array
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: List statistics information of tenants
      tags:
      - OBTenant
  /api/v1/statistics:
    get:
      consumes:
      - application/json
      description: get statistic data
      operationId: GetStatistics
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.StatisticData'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      security:
      - ApiKeyAuth: []
      summary: get statistic data
      tags:
      - Info
  /api/v1/webhook/alert/log:
    post:
      consumes:
      - application/json
      description: Log alerts sent by alertmanager.
      operationId: LogAlerts
      parameters:
      - description: payload
        in: body
        name: body
        required: true
        schema:
          $ref: '#/definitions/payload.WebhookPayload'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            allOf:
            - $ref: '#/definitions/response.APIResponse'
            - properties:
                data:
                  $ref: '#/definitions/response.DashboardInfo'
              type: object
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/response.APIResponse'
        "401":
          description: Unauthorized
          schema:
            $ref: '#/definitions/response.APIResponse'
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/response.APIResponse'
      summary: Log alerts
      tags:
      - Webhook
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Cookie
    type: apiKey
swagger: "2.0"
